{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.startButton = document.querySelector(\".button\");\n        this.scoreboard = document.querySelector(\".game-score\");\n        this.board = [];\n        this.cellHistory = [];\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"move\",\n            value: function move(direction) {\n                if (this.getStatus() === \"playing\") {\n                    this.cellHistory = [];\n                    var initBoard = JSON.stringify(this.board);\n                    switch(direction){\n                        case \"left\":\n                            this.moveLeft(this.board);\n                            break;\n                        case \"right\":\n                            this.moveRight(this.board);\n                            break;\n                        case \"up\":\n                            this.moveUp(this.board);\n                            break;\n                        case \"down\":\n                            this.moveDown(this.board);\n                            break;\n                    }\n                    if (JSON.stringify(this.board) !== initBoard) {\n                        this.addRandomCell();\n                        this.displayGame();\n                    } else {\n                        var checkboard = JSON.parse(JSON.stringify(this.board));\n                        var emptyCell = this.getEmptyCell();\n                        this.moveLeft(checkboard);\n                        this.moveRight(checkboard);\n                        this.moveUp(checkboard);\n                        this.moveDown(checkboard);\n                        if (!emptyCell.length) {\n                            if (JSON.stringify(checkboard) === initBoard) this.setStatus(\"lose\");\n                        }\n                    }\n                }\n            }\n        },\n        {\n            // #region Move Cells\n            key: \"moveLeft\",\n            value: function moveLeft(board) {\n                for(var y = 0; y < board.length; y++){\n                    var index = 0;\n                    for(var x = 0; x < board.length; x++)if (board[y][x] !== 0) {\n                        var cellValue = board[y][x];\n                        if (index !== x) {\n                            this.cellHistory.push({\n                                value: cellValue,\n                                oldCoords: {\n                                    X: x,\n                                    Y: y\n                                },\n                                newCoords: {\n                                    X: index,\n                                    Y: y\n                                },\n                                move: true\n                            });\n                            board[y][index] = cellValue;\n                            board[y][x] = 0;\n                        }\n                        if (index > 0 && board[y][index] === board[y][index - 1]) {\n                            var mergeValue = board[y][index] * 2;\n                            var lastMove = this.cellHistory[this.cellHistory.length - 1];\n                            if (lastMove && lastMove.newCoords.Y === y && lastMove.newCoords.X === index) {\n                                lastMove.merge = true;\n                                lastMove.newCoords.X = index - 1;\n                                lastMove.problem = true;\n                            } else this.cellHistory.push({\n                                value: mergeValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: index\n                                },\n                                newCoords: {\n                                    Y: y,\n                                    X: index - 1\n                                },\n                                merge: true\n                            });\n                            board[y][index - 1] = mergeValue;\n                            board[y][index] = 0;\n                            index--;\n                        }\n                        index++;\n                    }\n                }\n                return board;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight(board) {\n                for(var y = 0; y < board.length; y++){\n                    var index = board.length - 1;\n                    for(var x = board.length - 1; x >= 0; x--)if (board[y][x] !== 0) {\n                        var cellValue = board[y][x];\n                        if (index !== x) {\n                            this.cellHistory.push({\n                                value: cellValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: x\n                                },\n                                newCoords: {\n                                    Y: y,\n                                    X: index\n                                },\n                                move: true\n                            });\n                            board[y][index] = cellValue;\n                            board[y][x] = 0;\n                        }\n                        if (index < board.length - 1 && board[y][index] === board[y][index + 1]) {\n                            var mergeValue = board[y][index] * 2;\n                            var lastMove = this.cellHistory[this.cellHistory.length - 1];\n                            if (lastMove && lastMove.newCoords.Y === y && lastMove.newCoords.X === index) {\n                                lastMove.merge = true;\n                                lastMove.newCoords.X = index + 1;\n                            } else this.cellHistory.push({\n                                value: mergeValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: index\n                                },\n                                newCoords: {\n                                    Y: y,\n                                    X: index + 1\n                                },\n                                merge: true\n                            });\n                            board[y][index + 1] = mergeValue;\n                            board[y][index] = 0;\n                            index++;\n                        }\n                        index--;\n                    }\n                }\n                return board;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp(board) {\n                for(var x = 0; x < board.length; x++){\n                    var index = 0;\n                    for(var y = 0; y < board.length; y++)if (board[y][x] !== 0) {\n                        var cellValue = board[y][x];\n                        if (index !== y) {\n                            this.cellHistory.push({\n                                value: cellValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: x\n                                },\n                                newCoords: {\n                                    Y: index,\n                                    X: x\n                                },\n                                move: true\n                            });\n                            board[index][x] = cellValue;\n                            board[y][x] = 0;\n                        }\n                        if (index > 0 && board[index][x] === board[index - 1][x]) {\n                            var mergeValue = board[index][x] * 2;\n                            var lastMove = this.cellHistory[this.cellHistory.length - 1];\n                            if (lastMove && lastMove.newCoords.Y === index && lastMove.newCoords.X === x) {\n                                lastMove.merge = true;\n                                lastMove.newCoords.Y = index - 1;\n                            } else this.cellHistory.push({\n                                value: mergeValue,\n                                oldCoords: {\n                                    Y: index,\n                                    X: x\n                                },\n                                newCoords: {\n                                    Y: index - 1,\n                                    X: x\n                                },\n                                merge: true\n                            });\n                            board[index - 1][x] = mergeValue;\n                            board[index][x] = 0;\n                            index--;\n                        }\n                        index++;\n                    }\n                }\n                return board;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown(board) {\n                for(var x = 0; x < board.length; x++){\n                    var index = board.length - 1;\n                    for(var y = board.length - 1; y >= 0; y--)if (board[y][x] !== 0) {\n                        var cellValue = board[y][x];\n                        if (index !== y) {\n                            this.cellHistory.push({\n                                value: cellValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: x\n                                },\n                                newCoords: {\n                                    Y: index,\n                                    X: x\n                                },\n                                move: true\n                            });\n                            board[index][x] = cellValue;\n                            board[y][x] = 0;\n                        }\n                        if (index < board.length - 1 && board[index][x] === board[index + 1][x]) {\n                            var mergeValue = board[index][x] * 2;\n                            var lastMove = this.cellHistory[this.cellHistory.length - 1];\n                            if (lastMove && lastMove.newCoords.Y === index && lastMove.newCoords.X === x) {\n                                lastMove.merge = true;\n                                lastMove.newCoords.Y = index + 1;\n                            } else this.cellHistory.push({\n                                value: cellValue,\n                                oldCoords: {\n                                    Y: y,\n                                    X: x\n                                },\n                                newCoords: {\n                                    Y: index + 1,\n                                    X: x\n                                },\n                                merge: true\n                            });\n                            board[index + 1][x] = mergeValue;\n                            board[index][x] = 0;\n                            index++;\n                        }\n                        index--;\n                    }\n                }\n                return board;\n            }\n        },\n        {\n            // #endregion\n            key: \"getScore\",\n            value: function getScore() {\n                var score = 0;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var el = _step.value;\n                        score += el.reduce(function(acc, curVal) {\n                            return acc + curVal;\n                        }, 0);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return score;\n            }\n        },\n        {\n            key: \"setStatus\",\n            value: function setStatus(stat) {\n                switch(stat){\n                    case \"playing\":\n                        this.status = \"playing\";\n                        this.setMessage();\n                        break;\n                    case \"idle\":\n                        this.status = \"idle\";\n                        this.setMessage(\"start\");\n                        break;\n                    case \"win\":\n                        this.status = \"win\";\n                        this.setMessage(\"win\");\n                        break;\n                    case \"lose\":\n                        this.status = \"lose\";\n                        this.setMessage(\"lose\");\n                        break;\n                    default:\n                }\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.startButton.textContent = \"Restart\";\n                this.startButton.className = \"button restart\";\n                this.setStatus(\"playing\");\n                this.board = JSON.parse(JSON.stringify(this.initialState));\n                this.addRandomCell();\n                this.addRandomCell();\n                this.displayGame();\n            }\n        },\n        {\n            key: \"setMessage\",\n            value: function setMessage(message) {\n                var win = document.querySelector(\".message-win\");\n                var lose = document.querySelector(\".message-lose\");\n                var start = document.querySelector(\".message-start\");\n                lose.className = \"message message-lose hidden\";\n                start.className = \"message message-start hidden\";\n                win.className = \"message message-win hidden\";\n                switch(message){\n                    case \"win\":\n                        win.className = \"message message-win\";\n                        break;\n                    case \"lose\":\n                        lose.className = \"message message-lose\";\n                        break;\n                    case \"start\":\n                        start.className = \"message message-start\";\n                        break;\n                    default:\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.clearBoard();\n                this.cellHistory = [];\n                this.setStatus(\"idle\");\n                this.startButton.textContent = \"Start\";\n                this.startButton.className = \"button start\";\n                this.scoreboard.textContent = 0;\n            }\n        },\n        {\n            key: \"getEmptyCell\",\n            value: function getEmptyCell() {\n                var emptyCell = [];\n                for(var y = 0; y < this.board.length; y++){\n                    for(var x = 0; x < this.board.length; x++)if (!this.board[y][x]) emptyCell.push({\n                        x: x,\n                        y: y\n                    });\n                }\n                return emptyCell;\n            }\n        },\n        {\n            key: \"addRandomCell\",\n            value: function addRandomCell() {\n                var emptyCell = this.getEmptyCell();\n                if (emptyCell.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCell.length);\n                    var randomEmptyCell = emptyCell[randomIndex];\n                    this.board[randomEmptyCell.y][randomEmptyCell.x] = Math.random() < 0.9 ? 2 : 4;\n                    this.cellHistory.push({\n                        value: this.board[randomEmptyCell.y][randomEmptyCell.x],\n                        newCoords: {\n                            X: randomEmptyCell.x,\n                            Y: randomEmptyCell.y\n                        },\n                        newCell: true\n                    });\n                }\n            }\n        },\n        {\n            key: \"displayGame\",\n            value: function displayGame() {\n                this.displayAnimateBoard();\n                this.scoreboard.textContent = this.getScore();\n            }\n        },\n        {\n            key: \"displayAnimateBoard\",\n            value: function displayAnimateBoard() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.cellHistory[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var cellMove = _step.value;\n                        var perentElement = document.querySelector(\".move-zone\");\n                        if (cellMove.newCell) {\n                            var newBlock = document.createElement(\"div\");\n                            perentElement.appendChild(newBlock);\n                            newBlock.textContent = cellMove.value;\n                            newBlock.className = \"moving-block field-cell--\".concat(cellMove.value);\n                            newBlock.id = \"cell\".concat(cellMove.newCoords.Y).concat(cellMove.newCoords.X);\n                            newBlock.style.setProperty(\"--y\", cellMove.newCoords.Y);\n                            newBlock.style.setProperty(\"--x\", cellMove.newCoords.X);\n                            var keyFrames = [\n                                {\n                                    transform: \"scale(1)\"\n                                },\n                                {\n                                    transform: \"scale(1.56)\"\n                                },\n                                {\n                                    transform: \"scale(1)\"\n                                }\n                            ];\n                            var newspaperTiming = {\n                                duration: 400,\n                                iterations: 1,\n                                easing: \"ease-in-out\"\n                            };\n                            newBlock.animate(keyFrames, newspaperTiming);\n                        } else if (this.getStatus() === \"playing\") {\n                            var movingBlock = document.getElementById(\"cell\".concat(cellMove.oldCoords.Y).concat(cellMove.oldCoords.X));\n                            var nextBlockPosition = \"cell\".concat(cellMove.newCoords.Y).concat(cellMove.newCoords.X);\n                            if (document.querySelector(\"#\" + nextBlockPosition)) document.querySelector(\"#\" + nextBlockPosition).remove();\n                            movingBlock.id = nextBlockPosition;\n                            movingBlock.className = \"moving-block field-cell--\".concat(this.board[cellMove.newCoords.Y][cellMove.newCoords.X]);\n                            movingBlock.textContent = this.board[cellMove.newCoords.Y][cellMove.newCoords.X];\n                            movingBlock.style.setProperty(\"--y\", cellMove.newCoords.Y);\n                            movingBlock.style.setProperty(\"--x\", cellMove.newCoords.X);\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"nonAnimateUpdateBoard\",\n            value: function nonAnimateUpdateBoard() {\n                this.clearBoard();\n                for(var y = 0; y < this.board.length; y++){\n                    for(var x = 0; x < this.board.length; x++)if (this.board[y][x] !== 0) {\n                        var cell = document.querySelector(\"#cell\".concat(y).concat(x));\n                        cell.textContent = this.board[y][x];\n                        cell.className = \"field-cell field-cell--\".concat(this.board[y][x]);\n                    }\n                }\n            }\n        },\n        {\n            key: \"clearBoard\",\n            value: function clearBoard() {\n                var childrenToRemove = document.querySelectorAll(\".moving-block\");\n                childrenToRemove.forEach(function(child) {\n                    child.remove();\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$animationButton = document.querySelector(\"h1\");\n$197cd56b15c33885$var$startButton.onclick = function() {\n    if ($197cd56b15c33885$var$startButton.textContent === \"Start\") $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n};\n$197cd56b15c33885$var$animationButton.onclick = function() {\n    $197cd56b15c33885$var$game.animation();\n};\naddEventListener(\"keydown\", function(events) {\n    switch(events.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.move(\"up\");\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.move(\"down\");\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.move(\"right\");\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.move(\"left\");\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=index.2eb4e2d8.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.button');\nconst animationButton = document.querySelector('h1');\n\nstartButton.onclick = () => {\n  if (startButton.textContent === 'Start') {\n    game.start();\n  } else {\n    game.restart();\n  }\n};\n\nanimationButton.onclick = () => {\n  game.animation();\n};\n\naddEventListener('keydown', (events) => {\n  switch (events.key) {\n    case 'ArrowUp':\n      game.move('up');\n      break;\n    case 'ArrowDown':\n      game.move('down');\n      break;\n    case 'ArrowRight':\n      game.move('right');\n      break;\n    case 'ArrowLeft':\n      game.move('left');\n      break;\n  }\n});\n","'use strict';\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.initialState = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ];\r\n\r\n    this.startButton = document.querySelector('.button');\r\n    this.scoreboard = document.querySelector('.game-score');\r\n    this.board = [];\r\n    this.cellHistory = [];\r\n    this.status = 'idle';\r\n  }\r\n\r\n  move(direction) {\r\n    if (this.getStatus() === 'playing') {\r\n      this.cellHistory = [];\r\n\r\n      const initBoard = JSON.stringify(this.board);\r\n\r\n      switch (direction) {\r\n        case 'left':\r\n          this.moveLeft(this.board);\r\n          break;\r\n        case 'right':\r\n          this.moveRight(this.board);\r\n          break;\r\n        case 'up':\r\n          this.moveUp(this.board);\r\n          break;\r\n        case 'down':\r\n          this.moveDown(this.board);\r\n          break;\r\n      }\r\n\r\n      if (JSON.stringify(this.board) !== initBoard) {\r\n        this.addRandomCell();\r\n        this.displayGame();\r\n      } else {\r\n        const checkboard = JSON.parse(JSON.stringify(this.board));\r\n        const emptyCell = this.getEmptyCell();\r\n\r\n        this.moveLeft(checkboard);\r\n        this.moveRight(checkboard);\r\n        this.moveUp(checkboard);\r\n        this.moveDown(checkboard);\r\n        if(!emptyCell.length) {\r\n          if (JSON.stringify(checkboard) === initBoard) {\r\n            this.setStatus('lose');\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // #region Move Cells\r\n\r\n  moveLeft(board) {\r\n    for (let y = 0; y < board.length; y++) {\r\n      let index = 0;\r\n\r\n      for (let x = 0; x < board.length; x++) {\r\n        if (board[y][x] !== 0) {\r\n          const cellValue = board[y][x];\r\n\r\n          if (index !== x) {\r\n            this.cellHistory.push({\r\n              value: cellValue,\r\n              oldCoords: {\r\n                X: x,\r\n                Y: y,\r\n              },\r\n              newCoords: {\r\n                X: index,\r\n                Y: y,\r\n              },\r\n              move: true,\r\n            });\r\n\r\n            board[y][index] = cellValue;\r\n            board[y][x] = 0;\r\n          }\r\n\r\n          if (index > 0 && board[y][index] === board[y][index - 1]) {\r\n            const mergeValue = board[y][index] * 2;\r\n            const lastMove = this.cellHistory[this.cellHistory.length - 1];\r\n\r\n            if (\r\n              lastMove &&\r\n              lastMove.newCoords.Y === y &&\r\n              lastMove.newCoords.X === index\r\n            ) {\r\n              lastMove.merge = true;\r\n              lastMove.newCoords.X = index - 1;\r\n              lastMove.problem = true;\r\n            } else {\r\n              this.cellHistory.push({\r\n                value: mergeValue,\r\n                oldCoords: {\r\n                  Y: y,\r\n                  X: index,\r\n                },\r\n                newCoords: {\r\n                  Y: y,\r\n                  X: index - 1,\r\n                },\r\n                merge: true,\r\n              });\r\n            }\r\n\r\n            board[y][index - 1] = mergeValue;\r\n            board[y][index] = 0;\r\n            index--;\r\n          }\r\n          index++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  moveRight(board) {\r\n    for (let y = 0; y < board.length; y++) {\r\n      let index = board.length - 1;\r\n\r\n      for (let x = board.length - 1; x >= 0; x--) {\r\n        if (board[y][x] !== 0) {\r\n          const cellValue = board[y][x];\r\n\r\n          if (index !== x) {\r\n            this.cellHistory.push({\r\n              value: cellValue,\r\n              oldCoords: {\r\n                Y: y,\r\n                X: x,\r\n              },\r\n              newCoords: {\r\n                Y: y,\r\n                X: index,\r\n              },\r\n              move: true,\r\n            });\r\n\r\n            board[y][index] = cellValue;\r\n            board[y][x] = 0;\r\n          }\r\n\r\n          if (\r\n            index < board.length - 1 &&\r\n            board[y][index] === board[y][index + 1]\r\n          ) {\r\n            const mergeValue = board[y][index] * 2;\r\n\r\n            const lastMove = this.cellHistory[this.cellHistory.length - 1];\r\n\r\n            if (\r\n              lastMove &&\r\n              lastMove.newCoords.Y === y &&\r\n              lastMove.newCoords.X === index\r\n            ) {\r\n              lastMove.merge = true;\r\n              lastMove.newCoords.X = index + 1;\r\n            } else {\r\n              this.cellHistory.push({\r\n                value: mergeValue,\r\n                oldCoords: {\r\n                  Y: y,\r\n                  X: index,\r\n                },\r\n                newCoords: {\r\n                  Y: y,\r\n                  X: index + 1,\r\n                },\r\n                merge: true,\r\n              });\r\n            }\r\n\r\n            board[y][index + 1] = mergeValue;\r\n            board[y][index] = 0;\r\n            index++;\r\n          }\r\n          index--;\r\n        }\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  moveUp(board) {\r\n    for (let x = 0; x < board.length; x++) {\r\n      let index = 0;\r\n\r\n      for (let y = 0; y < board.length; y++) {\r\n        if (board[y][x] !== 0) {\r\n          const cellValue = board[y][x];\r\n\r\n          if (index !== y) {\r\n            this.cellHistory.push({\r\n              value: cellValue,\r\n              oldCoords: {\r\n                Y: y,\r\n                X: x,\r\n              },\r\n              newCoords: {\r\n                Y: index,\r\n                X: x,\r\n              },\r\n              move: true,\r\n            });\r\n            board[index][x] = cellValue;\r\n            board[y][x] = 0;\r\n          }\r\n\r\n          if (index > 0 && board[index][x] === board[index - 1][x]) {\r\n            const mergeValue = board[index][x] * 2;\r\n            const lastMove = this.cellHistory[this.cellHistory.length - 1];\r\n\r\n            if (\r\n              lastMove &&\r\n              lastMove.newCoords.Y === index &&\r\n              lastMove.newCoords.X === x\r\n            ) {\r\n              lastMove.merge = true;\r\n              lastMove.newCoords.Y = index - 1;\r\n            } else {\r\n              this.cellHistory.push({\r\n                value: mergeValue,\r\n                oldCoords: {\r\n                  Y: index,\r\n                  X: x,\r\n                },\r\n                newCoords: {\r\n                  Y: index - 1,\r\n                  X: x,\r\n                },\r\n                merge: true,\r\n              });\r\n            }\r\n            board[index - 1][x] = mergeValue;\r\n            board[index][x] = 0;\r\n            index--;\r\n          }\r\n          index++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  moveDown(board) {\r\n    for (let x = 0; x < board.length; x++) {\r\n      let index = board.length - 1;\r\n\r\n      for (let y = board.length - 1; y >= 0; y--) {\r\n        if (board[y][x] !== 0) {\r\n          const cellValue = board[y][x];\r\n\r\n          if (index !== y) {\r\n            this.cellHistory.push({\r\n              value: cellValue,\r\n              oldCoords: {\r\n                Y: y,\r\n                X: x,\r\n              },\r\n              newCoords: {\r\n                Y: index,\r\n                X: x,\r\n              },\r\n              move: true,\r\n            });\r\n            board[index][x] = cellValue;\r\n            board[y][x] = 0;\r\n          }\r\n\r\n          if (\r\n            index < board.length - 1 &&\r\n            board[index][x] === board[index + 1][x]\r\n          ) {\r\n            const mergeValue = board[index][x] * 2;\r\n            const lastMove = this.cellHistory[this.cellHistory.length - 1];\r\n\r\n            if (\r\n              lastMove &&\r\n              lastMove.newCoords.Y === index &&\r\n              lastMove.newCoords.X === x\r\n            ) {\r\n              lastMove.merge = true;\r\n              lastMove.newCoords.Y = index + 1;\r\n            } else {\r\n              this.cellHistory.push({\r\n                value: cellValue,\r\n                oldCoords: {\r\n                  Y: y,\r\n                  X: x,\r\n                },\r\n                newCoords: {\r\n                  Y: index + 1,\r\n                  X: x,\r\n                },\r\n                merge: true,\r\n              });\r\n            }\r\n            board[index + 1][x] = mergeValue;\r\n            board[index][x] = 0;\r\n            index++;\r\n          }\r\n          index--;\r\n        }\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  getScore() {\r\n    let score = 0;\r\n\r\n    for (const el of this.board) {\r\n      score += el.reduce((acc, curVal) => acc + curVal, 0);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  setStatus(stat) {\r\n    switch (stat) {\r\n      case 'playing':\r\n        this.status = 'playing';\r\n        this.setMessage();\r\n        break;\r\n      case 'idle':\r\n        this.status = 'idle';\r\n        this.setMessage('start');\r\n        break;\r\n      case 'win':\r\n        this.status = 'win';\r\n        this.setMessage('win');\r\n        break;\r\n      case 'lose':\r\n        this.status = 'lose';\r\n        this.setMessage('lose');\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  getState() {\r\n    return this.board;\r\n  }\r\n\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  start() {\r\n    this.startButton.textContent = 'Restart';\r\n    this.startButton.className = 'button restart';\r\n    this.setStatus('playing');\r\n    this.board = JSON.parse(JSON.stringify(this.initialState));\r\n    this.addRandomCell();\r\n    this.addRandomCell();\r\n    this.displayGame();\r\n  }\r\n\r\n  setMessage(message) {\r\n    const win = document.querySelector('.message-win');\r\n    const lose = document.querySelector('.message-lose');\r\n    const start = document.querySelector('.message-start');\r\n\r\n    lose.className = 'message message-lose hidden';\r\n    start.className = 'message message-start hidden';\r\n    win.className = 'message message-win hidden';\r\n\r\n    switch (message) {\r\n      case 'win':\r\n        win.className = 'message message-win';\r\n        break;\r\n      case 'lose':\r\n        lose.className = 'message message-lose';\r\n        break;\r\n      case 'start':\r\n        start.className = 'message message-start';\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  restart() {\r\n    this.clearBoard();\r\n    this.cellHistory = [];\r\n    this.setStatus('idle');\r\n    this.startButton.textContent = 'Start';\r\n    this.startButton.className = 'button start';\r\n    this.scoreboard.textContent = 0;\r\n  }\r\n\r\n  getEmptyCell() {\r\n    const emptyCell = [];\r\n\r\n    for (let y = 0; y < this.board.length; y++) {\r\n      for (let x = 0; x < this.board.length; x++) {\r\n        if (!this.board[y][x]) {\r\n          emptyCell.push({ x: x, y: y });\r\n        }\r\n      }\r\n    }\r\n\r\n    return emptyCell;\r\n  }\r\n\r\n  addRandomCell() {\r\n    const emptyCell = this.getEmptyCell();\r\n\r\n    if (emptyCell.length > 0) {\r\n      const randomIndex = Math.floor(Math.random() * emptyCell.length);\r\n      const randomEmptyCell = emptyCell[randomIndex];\r\n\r\n      this.board[randomEmptyCell.y][randomEmptyCell.x] =\r\n        Math.random() < 0.9 ? 2 : 4;\r\n\r\n      this.cellHistory.push({\r\n        value: this.board[randomEmptyCell.y][randomEmptyCell.x],\r\n        newCoords: {\r\n          X: randomEmptyCell.x,\r\n          Y: randomEmptyCell.y,\r\n        },\r\n        newCell: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  displayGame() {\r\n    this.displayAnimateBoard();\r\n    this.scoreboard.textContent = this.getScore();\r\n  }\r\n\r\n  displayAnimateBoard() {\r\n    for (const cellMove of this.cellHistory) {\r\n      const perentElement = document.querySelector('.move-zone');\r\n\r\n      if (cellMove.newCell) {\r\n        const newBlock = document.createElement('div');\r\n\r\n        perentElement.appendChild(newBlock);\r\n        newBlock.textContent = cellMove.value;\r\n        newBlock.className = `moving-block field-cell--${cellMove.value}`;\r\n        newBlock.id = `cell${cellMove.newCoords.Y}${cellMove.newCoords.X}`;\r\n\r\n        newBlock.style.setProperty('--y', cellMove.newCoords.Y);\r\n        newBlock.style.setProperty('--x', cellMove.newCoords.X);\r\n\r\n        const keyFrames = [\r\n          { transform: 'scale(1)' },\r\n          { transform: 'scale(1.56)' },\r\n          { transform: 'scale(1)' },\r\n        ];\r\n\r\n        const newspaperTiming = {\r\n          duration: 400,\r\n          iterations: 1,\r\n          easing: 'ease-in-out',\r\n        };\r\n\r\n        newBlock.animate(keyFrames, newspaperTiming);\r\n      } else {\r\n        if (this.getStatus() === 'playing') {\r\n          const movingBlock = document.getElementById(\r\n            `cell${cellMove.oldCoords.Y}${cellMove.oldCoords.X}`,\r\n          );\r\n\r\n          const nextBlockPosition = `cell${cellMove.newCoords.Y}${cellMove.newCoords.X}`;\r\n\r\n          if (document.querySelector('#' + nextBlockPosition)) {\r\n            document.querySelector('#' + nextBlockPosition).remove();\r\n          }\r\n          movingBlock.id = nextBlockPosition;\r\n\r\n          movingBlock.className = `moving-block field-cell--${this.board[cellMove.newCoords.Y][cellMove.newCoords.X]}`;\r\n\r\n          movingBlock.textContent =\r\n            this.board[cellMove.newCoords.Y][cellMove.newCoords.X];\r\n\r\n          movingBlock.style.setProperty('--y', cellMove.newCoords.Y);\r\n          movingBlock.style.setProperty('--x', cellMove.newCoords.X);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  nonAnimateUpdateBoard() {\r\n    this.clearBoard();\r\n\r\n    for (let y = 0; y < this.board.length; y++) {\r\n      for (let x = 0; x < this.board.length; x++) {\r\n        if (this.board[y][x] !== 0) {\r\n          const cell = document.querySelector(`#cell${y}${x}`);\r\n\r\n          cell.textContent = this.board[y][x];\r\n          cell.className = `field-cell field-cell--${this.board[y][x]}`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearBoard() {\r\n    const childrenToRemove = document.querySelectorAll('.moving-block');\r\n\r\n    childrenToRemove.forEach((child) => {\r\n      child.remove();\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$animationButton","protoProps","Game","instance","Constructor","TypeError","initialState","startButton","document","querySelector","scoreboard","board","cellHistory","status","key","value","direction","getStatus","initBoard","JSON","stringify","moveLeft","moveRight","moveUp","moveDown","addRandomCell","displayGame","checkboard","parse","emptyCell","getEmptyCell","length","setStatus","y","index","x","cellValue","push","oldCoords","X","Y","newCoords","move","mergeValue","lastMove","merge","problem","score","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","el","reduce","acc","curVal","err","return","stat","setMessage","textContent","className","message","win","lose","start","clearBoard","randomIndex","Math","floor","random","randomEmptyCell","newCell","displayAnimateBoard","getScore","cellMove","perentElement","newBlock","createElement","appendChild","concat","id","style","setProperty","keyFrames","transform","newspaperTiming","duration","iterations","easing","animate","movingBlock","getElementById","nextBlockPosition","remove","cell","childrenToRemove","querySelectorAll","forEach","child","$4fc75ccb937ab1df$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","onclick","restart","animation","addEventListener","events"],"version":3,"file":"index.2eb4e2d8.js.map"}